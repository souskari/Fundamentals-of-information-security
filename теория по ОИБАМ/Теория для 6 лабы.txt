JZ-"jump if zero". Если результат последнего выполненного арифметического или логического оператора равен нулю, то программа перейдет на указанную в инструкции метку. ZF=0. 
JNZ  - это инструкция условного перехода, которая перенаправляет управление на заданный адрес, если флаг Zero (ZF) равен 1, в противном случае выполнение продолжается со следующей инструкции.
JMP - это инструкция безусловного перехода. Она используется для изменения порядка выполнения программы, перенаправляя управление на другой адрес, указанный в операнде jmp.


Регистры специального назначения: используются для определенных функций и операций. К ним относятся, например, регистры ESP (стека), EBP (базовый указатель стека), EIP (указатель инструкции), EFLAGS (регистр флагов). 
Буква спереди зависит от разрядности ЭВМ, 64-r, 32-e (указывают на текующее положение стека). 


Функция call в ассемблере выполняет вызов другой функции или процедуры и сохраняет текущий адрес возврата в стеке.

Вызов функции с помощью инструкции call осуществляется следующим образом:
1. Система сохраняет адрес возврата (адрес следующей инструкции после call) в стеке.
2.Управление передается на адрес функции, которую нужно вызвать.
3.При завершении функции, система считывает адрес возврата из стека и возвращает управление обратно к адресу, сохраненному в стеке.


Инструкция RET(по сути return) в ассемблере используется для возврата из подпрограммы (функции) в вызывающую программу. 
Она позволяет получить управление над выполнением программы после того, как была выполнена последняя инструкция внутри подпрограммы.

Когда инструкция ret выполняется, она извлекает из стека адрес возврата, сохраненный в начале подпрограммы (обычно при помощи инструкции push), и перенаправляет управление на этот адрес. Адрес возврата обычно находится на вершине стека в момент выполнения инструкции RET.


При вызове функции в ассемблере, параметры передаются через стек или через регистры общего назначения (например, EAX, EBX, ECX, EDX).


Вызов функции в ассемблере происходит следующим образом:

1. Параметры, которые передаются в функцию, сохраняются в определенных регистрах или на стеке.
2.С помощью инструкции call передается управление на адрес функции.
3.Внутри функции выполняется ее код, используя переданные параметры.
4.Когда функция заканчивает свою работу, результат (если есть) возвращается через определенный регистр или через стек.
5.Управление передается обратно к инструкции следующей за инструкцией call.


!!! Как ломать SetTimer: 
В первом пуше меняем 0 на 1, тк первый пуш - указатель на функцию таймера (она будет вызвана при срабатывании таймера). Если поменять значение, то поскольку значение 1 не является допустимым адресом в адресном пространстве приложения, то при попытке выполнить функцию SetTimer с параметром TimerProc, равным 1, программа упадет с ошибкой. 

